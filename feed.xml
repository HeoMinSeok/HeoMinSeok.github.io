<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko-KR"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://heominseok.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://heominseok.github.io/" rel="alternate" type="text/html" hreflang="ko-KR" /><updated>2024-07-26T11:30:44+09:00</updated><id>https://heominseok.github.io/feed.xml</id><title type="html">MINDDO</title><subtitle>MINDDO의 코딩 기록장</subtitle><entry><title type="html">[React + TypeScript] - Context API, useReducer</title><link href="https://heominseok.github.io/posts/Context-API-+-Reducer-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[React + TypeScript] - Context API, useReducer" /><published>2024-07-25T00:00:00+09:00</published><updated>2024-07-25T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/Context%20API%20+%20Reducer%20%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://heominseok.github.io/posts/Context-API-+-Reducer-%EC%A0%95%EB%A6%AC/"><![CDATA[<style>
  .responsive-link-card {
    display: flex;
    align-items: center;
    border: 1px solid #d0d0d0;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    text-decoration: none;
    color: inherit;
    margin-top: 20px;
    padding: 10px;
  }
  
  .responsive-link-card img {
    width: 150px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
  }
  
  .responsive-link-content {
    display: flex;
    flex-direction: column;
  }
  
  .responsive-link-content h2 {
    margin: 0;
    font-size: 1.2em;
  }
  
  .responsive-link-content p {
    margin: 5px 0 10px;
    color: gray;
    font-size: 0.9em;
  }
  
  .responsive-link-content small {
    color: #777;
  }
  
  @media (max-width: 768px) {
    .responsive-link-card {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .responsive-link-card img {
      margin-right: 0;
      margin-bottom: 10px;
    }

    .responsive-link-content {
      width: 100%;
    }
  }
</style>

<p><img src="/assets/img/posts/training/context-drilling.png" alt="Context API - Props Drilling" />
<em>Context API - Props Drilling</em></p>

<h2 id="props-drliing-문제점">Props-Drliing 문제점</h2>

<ul>
  <li>데이터를 전달하기 위해 많은 중간 컴포넌트들이 불필요하게 props를 받아서 다시 전달해야하는데, 이는 코드 가독성을 저하시킴</li>
  <li>컴포넌트 트리가 변경되거나 중간에 새로운 컴포넌트를 추가하거나 제거해야 하는 경우, 모든 관련된 컴포넌트의 props를 업데이트해야해서 유지보수가 어려움</li>
  <li>중간 컴포넌트들이 단순히 데이터를 전달하는 역할만 할 경우, 동일한 코드가 반복</li>
  <li>특정 props를 전달하는 로직이 중간 컴포넌트에 포함되어 있는 경우, 이 컴포넌트를 재사용하기 어려워짐</li>
  <li>props가 자주 변경되는 경우, 많은 컴포넌트가 불필요하게 리렌더링</li>
</ul>

<p>이를 해결하기 위한 여러 방법들 중 <code class="language-plaintext highlighter-rouge">Context API</code>, <code class="language-plaintext highlighter-rouge">useReducer</code> 등이 있다.</p>

<h2 id="context-api란">Context API란?</h2>
<p><span><code class="language-plaintext highlighter-rouge">일일이 props를 넘겨주지 않고 컴포넌트 트리 전체에 데이터를 제공할 수 있는데, 이를 통해서 Props-Drilling 해결 가능</code></span></p>

<h3 id="context-api의-주요-구성-요소">Context API의 주요 구성 요소</h3>

<ul>
  <li><strong>React.createContext</strong>: Context 객체를 생성</li>
  <li><strong>Context.Provider</strong>: Context를 구독하는 컴포넌트들에게 Context 값을 제공</li>
  <li><strong>Context.Consumer</strong>: Context의 현재 값을 구독하여 사용, 일반적으로 Consumer 대신 <code class="language-plaintext highlighter-rouge">useContext</code> 훅을 사용</li>
</ul>

<h3 id="devtools에서-context-api-확인">DevTools에서 Context API 확인</h3>

<table>
  <thead>
    <tr>
      <th>컴포넌트 트리</th>
      <th>Provider</th>
      <th>Team</th>
      <th>Player</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="/assets/img/posts/training/context-provider.png" alt="컴포넌트 트리" /></td>
      <td><img src="/assets/img/posts/training/context.png" alt="Provider" /></td>
      <td><img src="/assets/img/posts/training/context-team.png" alt="Team" /></td>
      <td><img src="/assets/img/posts/training/context-player.png" alt="Player" /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>컴포넌트 트리</strong>: 첫 번째 이미지는 DevTools에서 본 컴포넌트 트리이다. <code class="language-plaintext highlighter-rouge">App</code> 컴포넌트 아래에 <code class="language-plaintext highlighter-rouge">TeamProvider</code>가 있으며, 그 안에 <code class="language-plaintext highlighter-rouge">Context.Provider</code>가 있는데,<code class="language-plaintext highlighter-rouge">ContextTeam</code>과 <code class="language-plaintext highlighter-rouge">ContextPlayer</code> 컴포넌트는 <code class="language-plaintext highlighter-rouge">Context.Provider</code>의 자식으로 있어 <code class="language-plaintext highlighter-rouge">Context.Provider</code>의 props를 훅 호출로 사용할 수 있다.</li>
  <li><strong>Provider</strong>: <code class="language-plaintext highlighter-rouge">Context.Provider</code>는 <code class="language-plaintext highlighter-rouge">teams</code> 데이터를 포함하고 있으며, <code class="language-plaintext highlighter-rouge">dispatch</code> 함수와 <code class="language-plaintext highlighter-rouge">state</code>를 props로 전달하는데, 이를 통해 하위 컴포넌트들이 Context의 값을 사용할 수 있게 된다.</li>
  <li><strong>Team, Player</strong>: Context를 통해 전역으로 있는 데이터를 가져왔기 때문에 props 필드는 비어있는 것을 볼 수 있다.</li>
</ul>

<p>실제 코드에서도 컴포넌트에 props를 전달하지 않고, 해당 컴포넌트에서 Context를 호출해 데이터를 가져왔다.</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="cm">/* useTeams는 ContextTeams를 커스텀 훅으로 만들었음 */</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">teams</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">,</span> <span class="nx">state</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">useTeams</span><span class="p">();</span> 
<span class="nx">이런</span> <span class="nx">식으로</span> <span class="nx">호출해서</span> <span class="nx">필요한</span> <span class="nx">데이터를</span> <span class="nx">뽑아올</span> <span class="nx">수</span> <span class="nx">있음</span>

<span class="cm">/* useTeams 커스텀 훅 */</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">TeamContext</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../context/ContextTeams</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">useTeams</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">context</span> <span class="o">=</span> <span class="nf">useContext</span><span class="p">(</span><span class="nx">TeamContext</span><span class="p">);</span>
  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">useTeams must be used within a TeamProvider</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">context</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useTeams</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="devtools에서-props-drilling-확인">DevTools에서 Props Drilling 확인</h3>

<table>
  <thead>
    <tr>
      <th>컴포넌트 트리</th>
      <th>부모 컴포넌트에서 Props 전달</th>
      <th>Team</th>
      <th>Player</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="/assets/img/posts/training/props-tree.png" alt="컴포넌트 트리" /></td>
      <td><img src="/assets/img/posts/training/props.png" alt="컴포넌트 트리" /></td>
      <td><img src="/assets/img/posts/training/props-team.png" alt="Team" /></td>
      <td><img src="/assets/img/posts/training/props-player.png" alt="Player" /></td>
    </tr>
  </tbody>
</table>

<ul>
  <li><strong>컴포넌트 트리</strong>: 첫 번째 이미지는 DevTools에서 본 컴포넌트 트리이다. <code class="language-plaintext highlighter-rouge">App</code> 컴포넌트 아래에 <code class="language-plaintext highlighter-rouge">DrillingTeam</code>, <code class="language-plaintext highlighter-rouge">DrillingPlayer</code>가 있다.</li>
  <li><strong>props 전달</strong>: props를 자식 컴포넌트로 전달하는 코드 사진이다.</li>
  <li><strong>Team, Player</strong>: 이미지를 보면 명확하게 props로 데이터를 받아오는 것을 볼 수 있다.</li>
</ul>

<blockquote>
  <p>실제 프로젝트에서는 데이터도 많고 한데, props로 일일이 다 전달하면 위에서 말한 문제점이 생겨나게 되는 것이다. Context API는 전역으로 상태를 담아주어서 따로 props를 컴포넌트마다 전달하지 않아도 useContext나 Context를 커스텀 훅에 담아서 값을 쉽게 뽑아올 수 있다. 하지만 Context도 구독하는 모든 컴포넌트가 값 변경될 때마다 리렌더링 되어 성능에 문제가 생길 수 있다.</p>
</blockquote>

<h2 id="reducer란">Reducer란?</h2>
<p><span><code class="language-plaintext highlighter-rouge">하나의 컴포넌트 내에서 state를 다루는 로직을 해당 컴포넌트로 분리하여 외부에서 처리 할 수 있게 해줌</code></span></p>

<p><img src="/assets/img/posts/training/reducer.webp" alt="useReducer" />
<em>useReducer Flow</em></p>

<h3 id="usereducer의-주요-구성-요소">useReducer의 주요 구성 요소</h3>

<ul>
  <li><strong>State</strong>: 현재 컴포넌트의 상태</li>
  <li><strong>Dispatch</strong>: 상태를 업데이트하는 함수, 특정 액션을 dispatch 함수에 전달하면, 이 액션에 따라 상태가 업데이트</li>
  <li><strong>Reducer</strong>: 상태 업데이트 로직을 정의하는 함수, 이 함수는 현재 상태와 액션 객체를 인수로 받아 새로운 상태를 반환</li>
</ul>

<h3 id="usereducer의-흐름">useReducer의 흐름</h3>
<ol>
  <li>EventHandler: 컴포넌트에서 이벤트 핸들러가 호출</li>
  <li>Dispatch: 이벤트 핸들러는 dispatch 함수를 호출하여 액션 객체를 전달</li>
  <li>Reducer: dispatch 함수는 액션 객체를 reducer 함수로 전달</li>
  <li>State Update: reducer 함수는 현재 상태와 액션 객체를 기반으로 새로운 상태를 반환</li>
  <li>Component Re-render: 상태가 업데이트되면 컴포넌트가 다시 렌더링</li>
</ol>

<h3 id="devtools에서-usereducer-확인">DevTools에서 useReducer 확인</h3>

<div style="text-align: center;">
  <img src="/assets/img/posts/training/reducer.gif" alt="reducer" style="height: 100%;" />
</div>
<p><br /></p>
<blockquote>
  <p>1.각 팀의 버튼을 누른다. <br />
2.dispatch 함수가 호출되어 액션 객체를 reducer 함수로 전달한다. <br />
3.reducer 함수는 현재 상태와 액션 객체를 기반으로 새로운 상태를 반환한다. 즉, 해당 팀의 선수를 반환한다. <br />
4.상태가 업데이트되면 컴포넌트가 다시 렌더링된다.</p>
</blockquote>

<p><strong>이와 같이 useReducer를 사용하면 복잡한 상태 로직을 컴포넌트 내에서 효율적으로 관리할 수 있다.<br /> useReducer는 특히 상태 업데이트 로직이 복잡하거나 여러 액션 타입을 처리해야 할 때 유용하다.</strong></p>

<p><br /></p>

<h3 id="예제-코드">예제 코드</h3>

<div class="responsive-link-card" onclick="window.open('https://stackblitz.com/edit/vitejs-vite-genj61?file=src%2FApp.tsx', '_blank');">
  <div>
    <img src="./assets/img/posts/training/stack-blitz.webp" alt="stackblitz" />
  </div>
  <div class="responsive-link-content">
    <h2>Voiteks - Vote (forked)</h2>
    <p>StackBlitz</p>
    <small>stackbiltz.com</small>
  </div>
</div>
<p><br /></p>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="React" /><category term="React" /><category term="TypeScript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[유데미x스나이퍼팩토리] 프로젝트 캠프 : Next.js 2기 - 학습 일지 Week1</title><link href="https://heominseok.github.io/posts/%ED%95%99%EC%8A%B5%EC%9D%BC%EC%A7%80/" rel="alternate" type="text/html" title="[유데미x스나이퍼팩토리] 프로젝트 캠프 : Next.js 2기 - 학습 일지 Week1" /><published>2024-07-20T00:00:00+09:00</published><updated>2024-07-20T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%ED%95%99%EC%8A%B5%EC%9D%BC%EC%A7%80</id><content type="html" xml:base="https://heominseok.github.io/posts/%ED%95%99%EC%8A%B5%EC%9D%BC%EC%A7%80/"><![CDATA[<style>
  .flex-container {
    display: flex;
    justify-content: space-between;
  }
  .image-container {
    position: relative;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .image-container img {
    width: 100%;
    height: 300px;
  }
  .caption {
    text-align: center;
    margin-top: 5px;
  }

  .responsive-link-card {
    display: flex;
    align-items: center;
    border: 1px solid #d0d0d0;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    text-decoration: none;
    color: inherit;
    margin-top: 20px;
    padding: 10px;
  }
  
  .responsive-link-card img {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
  }
  
  .responsive-link-content {
    display: flex;
    flex-direction: column;
  }
  
  .responsive-link-content h2 {
    margin: 0;
    font-size: 1.2em;
  }
  
  .responsive-link-content p {
    margin: 5px 0 10px;
    color: gray;
    font-size: 0.9em;
  }
  
  .responsive-link-content small {
    color: #777;
  }
  
  @media (max-width: 768px) {
    .responsive-link-card {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .responsive-link-card img {
      margin-right: 0;
      margin-bottom: 10px;
    }

    .responsive-link-content {
      width: 100%;
    }
</style>

<hr />

<h2 id="1주차"><strong>1주차</strong></h2>
<h3 id="20240715--20240719"><strong>2024.07.15 ~ 2024.07.19</strong></h3>

<hr />

<p><img src="/assets/img/posts/camp-review/udemy-main.png" alt="유데미x스나이퍼팩토리" /></p>

<h2 id="-참가하게-된-계기">🐥 참가하게 된 계기</h2>
<p>백엔드 개발을 주로 해왔었는데 프론트엔드 기술을 배우기 위해 Next.js 과정을 시작하게되었다. <br /> 스프링부트와 자바만 주구장창 하던 내가… 몇개월 전에 리액트를 접하게 되었는데 너무나도 재미있고 나에게 잘 맞았다… <br />
그러다가 Next JS를 알게되었고 프론트엔드쪽도 깊게 공부해서 프론트엔드와 백엔드를 모두 다룰 수 있는 풀스택 개발자가 되기 위해 이번 과정에 참여하였다 🤟</p>

<h2 id="-1주차-회고">🐥 1주차 회고</h2>

<div class="flex-container">
  <div class="image-container">
    <img src="/assets/img/posts/camp-review/week1-jep.png" />
    <div class="caption">온라인</div>
  </div>
  <div class="image-container">
    <img src="/assets/img/posts/camp-review/week1-offline.jpg" />
    <div class="caption">오프라인</div>
  </div>
</div>

<h4 id="-개인적인-소감">🐣 개인적인 소감</h4>
<blockquote>
  <p><span>이태원에서 왔다갔다 했는데 너무 힘들었다.. 길도 너무 복잡하고 경사도 높고.. 심지어 수요일부터는 비가 너무 너무 많이 와서 신발이 아쿠아슈즈가 되어버렸다..  온 몸은 찝찝하고 휴.. 😥 <br />
그래도 수업은 너무나도 알찼다 ! 수코딩 강사님이 하셨는데 너무 잘 가르쳐주셨다 ! <br /> 본인은 자바와 파이썬만 주로 다루어왔어서 자바스크립트를 깊게 공부하지 않았었다.. <br />
그게 조금 걱정이였는데 다시 기본 개념과 문법을 학습하며 ES6의 기능들을 되짚어보았고 까먹었던 내용들을 다시 되짚어보게 되었다 ❗️❗️ <br /><br />
<strong>감사합니다 강사님 😝</strong> </span> <br /><br />
<span>다음주부터는 나는 온라인으로 참가해야한다 ! 본가로 내려와서 더이상 강의장으로 갈 수가 없다 .. <br />
새로 사귄 분들이 있었는데 못 보게 된게 조금 아쉽다 1주동안 재밌었는데…! 프로젝트 시작하면 다시 봐요 🥹</span></p>
</blockquote>

<h4 id="-개념정리">🐣 개념정리</h4>
<p>이번 주에는 JavaScript 기초 개념을 다루었다.<br /></p>

<ul>
  <li>JavaScript 기본 문법: 변수 선언(var, let, const), 자료형, 조건문, 반복문, 연산자</li>
  <li>함수: 함수 선언과 표현식, 화살표 함수, 콜백 함수</li>
  <li>객체와 배열: 객체 생성, 배열의 메서드 활용, 프로토타입, 클래스</li>
  <li>실행 컨텍스트와 호이스팅</li>
  <li>내장 객체 및 메서드</li>
  <li>비동기 프로그래밍: 동기 및 비동기 처리 <code class="language-plaintext highlighter-rouge">Promise~then</code>, <code class="language-plaintext highlighter-rouge">async/await</code></li>
  <li>DOM 조작: DOM 요소 선택과 이벤트 처리</li>
  <li>TypeScript: 기본 타입 이해</li>
</ul>

<blockquote>
  <p>본 내용들의 정리는 JavaScript 카테고리에 ❗️<br /></p>
</blockquote>

<div class="responsive-link-card" onclick="window.open('https://heominseok.github.io/categories/javascript/', '_blank');">
  <div>
    <img src="./assets/img/chilbok.jpeg" alt="MINDDO 이미지" />
  </div>
  <div class="responsive-link-content">
    <h2>MINDDO</h2>
    <p>MINDDO의 코딩 기록장</p>
    <small>heominseok.github.io</small>
  </div>
</div>
<p><br /></p>

<h4 id="-과제-요구사항">🐣 과제 요구사항</h4>
<blockquote>
  <p>2일차: 반복문과 조건문</p>
</blockquote>

<ul>
  <li>for 반복문: 주어진 범위 내에서 반복 작업을 수행</li>
  <li>조건문(if-else): 조건에 따라 서로 다른 작업을 수행</li>
  <li>요구사항
    <ul>
      <li>✔️ 반복문을 통해 숫자나 배열의 요소들을 순회하고 처리</li>
      <li>✔️ 조건문을 통해 특정 조건에 따라 분기 처리</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>3일차: 함수와 문자열 조작</p>
</blockquote>

<ul>
  <li>함수 선언 및 호출: 특정 작업을 수행하는 코드를 재사용 가능하도록 정의</li>
  <li>문자열 조작: 문자열을 변환하고 필요한 형식으로 가공</li>
  <li>
    <p>요구사항</p>

    <ul>
      <li>✔️ 함수를 작성하여 반복적인 작업을 모듈화하고 재사용성을 높임</li>
      <li>✔️ 문자열을 조작하여 원하는 형식으로 변환</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>4일차: 내장 객체 및 메서드</p>
</blockquote>

<ul>
  <li>배열 메서드(find, filter, some, every, reduce, sort): 배열 내 요소를 찾거나, 필터링하거나, 조건을 확인하거나, 합산하거나, 정렬하는 작업을 수행</li>
  <li>문자열 메서드(replace, split): 문자열을 변환하고 특정 구분자로 분리하여 배열을 생성</li>
  <li>고급 배열 메서드를 활용하여 데이터를 처리하고 분석</li>
  <li>
    <p>요구사항</p>

    <ul>
      <li>✔️ 배열의 다양한 메서드를 사용하여 데이터를 처리하고 필요한 결과를 도출</li>
      <li>✔️ 문자열 메서드를 활용하여 문자열을 변환하고 필요한 형식으로 가공</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="회고록" /><category term="유데미" /><category term="udemy" /><category term="웅진씽크빅" /><category term="스나이퍼팩토리" /><category term="Next.js" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[JavaScript] - 기본 문법 (5)</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(5)/" rel="alternate" type="text/html" title="[JavaScript] - 기본 문법 (5)" /><published>2024-07-19T00:00:00+09:00</published><updated>2024-07-19T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC%20(5)</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(5)/"><![CDATA[<h2 id="-dom">🚀 DOM</h2>
<p><span><code class="language-plaintext highlighter-rouge">DOM(Document Object Model)은 웹 페이지의 구조화된 표현으로, 자바스크립트를 사용하여 웹 페이지의 콘텐츠와 구조를 동적으로 조작할 수 있음</code></span></p>

<h3 id="1️⃣-dom-요소-선택">1️⃣ DOM 요소 선택</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">getElementById()</code> ➡️ ID로 요소 선택
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">myId</span><span class="dl">'</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">getElementsByClassName()</code> ➡️ 클래스 이름으로 요소 선택
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">myClass</span><span class="dl">'</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">getElementsByTagName()</code> ➡️ 태그 이름으로 요소 선택
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>💥 <code class="language-plaintext highlighter-rouge">querySelector()</code> ➡️ CSS 선택자를 사용하여 첫 번째 일치 요소 선택
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.myClass</span><span class="dl">'</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>💥 <code class="language-plaintext highlighter-rouge">querySelectorAll()</code> ➡️ CSS 선택자를 사용하여 모든 일치 요소 선택
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">.myClass</span><span class="dl">'</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="2️⃣-dom-요소-생성-및-추가">2️⃣ DOM 요소 생성 및 추가</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">createElement()</code> ➡️ 요소 생성
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">newElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">newElement</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello, World!</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">appendChild()</code>, <code class="language-plaintext highlighter-rouge">insertBefore()</code> ➡️ 요소 생성
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">newElement</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="3️⃣-dom-요소-속성-조작">3️⃣ DOM 요소 속성 조작</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">setAttribute()</code> ➡️ 속성 추가/수정
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="nx">element</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">newClass</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">removeAttribute()</code> ➡️ 속성 제거
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>  <span class="nx">element</span><span class="p">.</span><span class="nf">removeAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>속성 접근
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="nx">element</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">newId</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">newClass</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="4️⃣-dom-요소-스타일-조작">4️⃣ DOM 요소 스타일 조작</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">style</code> ➡️ 스타일 설정
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">20px</span><span class="dl">'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="5️⃣-이벤트-처리">5️⃣ 이벤트 처리</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">addEventListener()</code> ➡️ 이벤트 리스너 추가
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Element clicked!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">removeEventListener()</code> ➡️ 이벤트 리스너 제거
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>  <span class="kd">function</span> <span class="nf">handleClick</span><span class="p">()</span> <span class="p">{</span>
<span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Element clicked!</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleClick</span><span class="p">);</span>
  <span class="nx">element</span><span class="p">.</span><span class="nf">removeEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleClick</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="JavaScript" /><category term="JavaScript" /><summary type="html"><![CDATA[🚀 DOM DOM(Document Object Model)은 웹 페이지의 구조화된 표현으로, 자바스크립트를 사용하여 웹 페이지의 콘텐츠와 구조를 동적으로 조작할 수 있음]]></summary></entry><entry><title type="html">[TypeScript] 기본 문법</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(6)/" rel="alternate" type="text/html" title="[TypeScript] 기본 문법" /><published>2024-07-19T00:00:00+09:00</published><updated>2024-07-19T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC%20(6)</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(6)/"><![CDATA[<h4><img src="https://img.shields.io/badge/TypeScript-3178C6?style=for-the-badge&amp;logo=typescript&amp;logoColor=white" /></h4>

<h3 id="1️⃣-타입스크립트-기본-타입">1️⃣ 타입스크립트 기본 타입</h3>

<h4 id="string">String</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">color</span><span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="number">Number</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">decimal</span><span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="boolean">Boolean</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">isDone</span><span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="array">Array</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">list</span><span class="p">:</span> <span class="kr">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">list</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="object">Object</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">user</span><span class="p">:</span><span class="nx">object</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span><span class="dl">"</span><span class="s2">민또</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span><span class="mi">19</span> <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="tuple-️-고정된-개수의-요소를-가지며-각-요소의-타입이-지정된-배열">Tuple ➡️ <code class="language-plaintext highlighter-rouge">고정된 개수의 요소를 가지며 각 요소의 타입이 지정된 배열</code></h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">arr</span><span class="p">:</span> <span class="p">[</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Bellingham</span><span class="dl">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">];</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="null--undefined">Null / Undefined</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">u</span><span class="p">:</span> <span class="kc">undefined</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">n</span><span class="p">:</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="any-️-어떤-타입이든-상관-x">Any ➡️ 어떤 타입이든 상관 X</h4>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">notSure</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="그-외-️-enum-never-void">그 외 ➡️ Enum, Never, Void</h4>

<h2 id="-함수-타입">🚀 함수 타입</h2>
<h3 id="1️⃣-매개변수-타입-지정">1️⃣ 매개변수 타입 지정</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">};</span>
<span class="nf">add</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span> <span class="c1">// 가능</span>
<span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">x</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">y</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// 불가능</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2️⃣-반환-값-타입-지정">2️⃣ 반환 값 타입 지정</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">):</span><span class="kr">number</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">};</span> <span class="c1">// 반환 값 반드시 Number 형</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-옵셔널-파라미터">3️⃣ 옵셔널 파라미터</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">선택적 매개변수는 "?"를 사용하여 정의</code></p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">optionalName</span><span class="p">(</span><span class="nx">firstName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">lastName</span><span class="p">?:</span> <span class="kr">string</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">lastName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">firstName</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">lastName</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">firstName</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">optionalName</span><span class="p">(</span><span class="dl">"</span><span class="s2">Minddo</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Heo</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Minddo Heo</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">optionalName</span><span class="p">(</span><span class="dl">"</span><span class="s2">Minddo</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Minddo</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-타입-오퍼레이터">🚀 타입 오퍼레이터</h2>
<h3 id="1️⃣-유니언-타입">1️⃣ 유니언 타입</h3>
<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">유니언 타입은 여러 개의 타입을 결합하여 변수에 할당할 수 있는 값을 다양하게 만들 수 있음</code><br /></li>
    <li><code class="language-plaintext highlighter-rouge">유니언 타입은 연결된 타입 중 1개만 만족하면 됨</code></li>
  </ul>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">value</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span><span class="p">;</span>

<span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">minddo</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// OK</span>
<span class="nx">value</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span> <span class="c1">// OK</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><span style="color: red">But</span> <code class="language-plaintext highlighter-rouge">특정 타입의 메소드를 사용하려고 하면 에러가 발생 할 수 있음</code></li>
  <li>☝🏻 때문에 <code class="language-plaintext highlighter-rouge">Type Guard</code> 사용하기</li>
</ul>

<blockquote>
  <p><strong>Type Guard</strong> <br /></p>
</blockquote>

<p>➡️ 런타임에 변수의 타입 확인 후, 그에 따라 해당 타입의 메소드 사용할 수 있도록 해줌</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">typeof</code> 연산자 사용한 타입 가드
    <ul>
      <li>원시 타입 확인에 유용
        <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">printId</span><span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">number</span> <span class="o">|</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
<span class="k">if </span><span class="p">(</span><span class="k">typeof</span> <span class="nx">id</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">// id가 string 타입인 경우</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ID (string): </span><span class="p">${</span><span class="nx">id</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">()}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="c1">// id가 number 타입인 경우</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ID (number): </span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">instanceof</code> 연산자 사용한 타입 가드
    <ul>
      <li>객체가 특정 클래스의 인스턴스인지 확인할 때 사용</li>
    </ul>
  </li>
</ul>

<details>
<summary>코드 보기</summary>
<div>

    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">ManchesterUTD</span> <span class="p">{</span>
  <span class="nf">utd</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">근본</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">ManchesterCity</span> <span class="p">{</span>
  <span class="nf">city</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">노근본</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Club</span> <span class="o">=</span> <span class="nx">ManchesterUTD</span> <span class="o">|</span> <span class="nx">ManchesterCity</span><span class="p">;</span>

<span class="kd">function</span> <span class="nf">favorite</span><span class="p">(</span><span class="nx">club</span><span class="p">:</span> <span class="nx">Club</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">club</span> <span class="k">instanceof</span> <span class="nx">ManchesterUTD</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">club</span><span class="p">.</span><span class="nf">utd</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">club</span><span class="p">.</span><span class="nf">city</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">mu</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ManchesterUTD</span><span class="p">();</span>
<span class="kd">let</span> <span class="nx">mc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ManchesterCity</span><span class="p">();</span>

<span class="nf">favorite</span><span class="p">(</span><span class="nx">mu</span><span class="p">);</span> 
<span class="nf">favorite</span><span class="p">(</span><span class="nx">mc</span><span class="p">);</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </div>
</details>

<h3 id="2️⃣-인터섹션-타입">2️⃣ 인터섹션 타입</h3>
<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">인터섹션 타입은 여러 타입을 결합하여 하나의 복합 타입을 만들 수 있음</code><br /></li>
    <li><code class="language-plaintext highlighter-rouge">인터섹션 타입은 연결된 타입을 모두 만족해야함</code></li>
  </ul>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">introduce</span><span class="p">:</span> <span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span> <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span> <span class="p">}</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="na">job</span><span class="p">:</span> <span class="kr">string</span> <span class="p">}</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bellingham</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">22</span><span class="p">,</span>
  <span class="na">job</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Soccer Player</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-인터페이스">🚀 인터페이스</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">객체의 타입을 정의할 때 사용하는 도구</code></p>
</blockquote>

<h3 id="1️⃣-기본-인터페이스-정의">1️⃣ 기본 인터페이스 정의</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">person</span><span class="p">:</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">minddo</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">29</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2️⃣-인터페이스-병합">2️⃣ 인터페이스 병합</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">player</span><span class="p">:</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bellingham</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">22</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-인터페이스-상속">3️⃣ 인터페이스 상속</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Club</span> <span class="p">{</span>
  <span class="nl">uniformColor</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kr">interface</span> <span class="nx">ManUtd</span> <span class="kd">extends</span> <span class="nx">Club</span> <span class="p">{</span>
  <span class="nl">country</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">player</span><span class="p">:</span> <span class="nx">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">uniformColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Red</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">country</span><span class="p">:</span> <span class="dl">"</span><span class="s2">England</span><span class="dl">"</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4️⃣-인덱스-시그니처">4️⃣ 인덱스 시그니처</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">객체가 임의의 속성을 가질 수 있도록 정의</code></p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">ClubDictionary</span> <span class="p">{</span>
  <span class="p">[</span><span class="nx">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">]:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">manU</span><span class="p">:</span> <span class="nx">ClubDictionary</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ManchesterUtd</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">rank</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">country</span><span class="p">:</span> <span class="dl">"</span><span class="s2">England</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">stadium</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Old Trafford</span><span class="dl">"</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">manU</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="-변수에-인터페이스-적용">🐥 변수에 인터페이스 적용</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">username</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">password</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">user</span><span class="p">:</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">username</span><span class="p">:</span> <span class="dl">"</span><span class="s2">mingddo</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1234</span><span class="dl">"</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="-함수에-인터페이스-적용">🐥 함수에 인터페이스 적용</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Login</span> <span class="p">{</span>
  <span class="p">(</span><span class="nx">username</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">password</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nx">boolean</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">login</span><span class="p">:</span> <span class="nx">Login</span><span class="p">;</span>
<span class="nx">login</span> <span class="o">=</span> <span class="p">(</span><span class="nx">username</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">password</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// 로그인 로직</span>
  <span class="k">return</span> <span class="nx">username</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">mingddo</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="nx">password</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">1234</span><span class="dl">"</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">login</span><span class="p">(</span><span class="dl">"</span><span class="s2">mingddo</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">1234</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// true</span>

<span class="kr">interface</span> <span class="nx">IPerson</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">averageAge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">people</span><span class="p">:</span> <span class="nx">IPerson</span><span class="p">[]):</span> <span class="kr">number</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">people</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">person</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">/</span> <span class="nx">people</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">average</span> <span class="o">=</span> <span class="nf">averageAge</span><span class="p">([</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Mingddo</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">30</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">CutieMingddo</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">10</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">You</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span>
<span class="p">]);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">average</span><span class="p">);</span> <span class="c1">// 30</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-타입-별칭type-aliases">🚀 타입 별칭(Type Aliases)</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">type 키워드를 사용해 타입을 지정</code></p>
</blockquote>

<ul>
  <li>특정 타입에 별명을 붙여 재사용 가능하게 함</li>
  <li>코드의 가독성 증가</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="cm">/* 객체 타입에 타입 별칭 */</span>
<span class="kd">type</span> <span class="nx">Minddo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">minddo</span><span class="p">:</span> <span class="nx">Minddo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">minseok</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">25</span>
<span class="p">};</span>

<span class="cm">/* 유니언 타입에 타입 별칭 */</span>
<span class="kd">type</span> <span class="nx">Color</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Red</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Blue</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">Yellow</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">color</span><span class="p">:</span> <span class="nx">Color</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Red</span><span class="dl">"</span><span class="p">;</span>

<span class="cm">/* 함수 타입에 타입 별칭 */</span>
<span class="kd">type</span> <span class="nx">Stacks</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">period</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">stacks</span> <span class="o">=</span> <span class="p">(</span><span class="nx">stack</span><span class="p">:</span> <span class="nx">Stacks</span><span class="p">):</span> <span class="kr">string</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`Name: </span><span class="p">${</span><span class="nx">stack</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, Period: </span><span class="p">${</span><span class="nx">stack</span><span class="p">.</span><span class="nx">period</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">myStack</span><span class="p">:</span> <span class="nx">Stacks</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Java</span><span class="dl">"</span><span class="p">,</span> <span class="na">period</span><span class="p">:</span> <span class="mi">8</span> <span class="p">};</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">stacks</span><span class="p">(</span><span class="nx">myStack</span><span class="p">));</span> <span class="c1">// Name: Java, Period: 8</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-enum">🚀 Enum</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">enum은 관련된 값의 집합에 이름을 붙여주는 방법</code></p>
</blockquote>

<h3 id="1️⃣-숫자-열거형">1️⃣ 숫자 열거형</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Direction</span> <span class="p">{</span>
  <span class="nx">Up</span><span class="p">,</span>
  <span class="nx">Down</span><span class="p">,</span>
  <span class="nx">Left</span><span class="p">,</span>
  <span class="nx">Right</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">direction</span><span class="p">:</span> <span class="nx">Direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">Up</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">direction</span><span class="p">);</span> <span class="c1">// 0</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2️⃣-문자-열거형">2️⃣ 문자 열거형</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Direction</span> <span class="p">{</span>
  <span class="nx">Up</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">UP</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">Down</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">DOWN</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">Left</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">LEFT</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">Right</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">RIGHT</span><span class="dl">"</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">direction</span><span class="p">:</span> <span class="nx">Direction</span> <span class="o">=</span> <span class="nx">Direction</span><span class="p">.</span><span class="nx">Left</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">direction</span><span class="p">);</span> <span class="c1">// "LEFT"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-이니셜라이즈된-열거형-const-enum">3️⃣ 이니셜라이즈된 열거형 (Const Enum)</h3>
<blockquote>
  <p><strong>const enum</strong>은 컴파일 타임 상수로 최적화되는 열거형</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">const enum</code>은 런타임에 실제 객체로 존재하지 않음</li>
  <li>컴파일 시점에 열거형 값이 상수로 대체 !</li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="kr">enum</span> <span class="nx">HttpStatus</span> <span class="p">{</span>
  <span class="nx">OK</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
  <span class="nx">BadRequest</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span>
  <span class="nx">Unauthorized</span> <span class="o">=</span> <span class="mi">401</span><span class="p">,</span>
  <span class="nx">NotFound</span> <span class="o">=</span> <span class="mi">404</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">handleResponse</span><span class="p">(</span><span class="nx">status</span><span class="p">:</span> <span class="nx">HttpStatus</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">:</span> 
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Request was successful.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">BadRequest</span><span class="p">:</span> 
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Bad request.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">Unauthorized</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Unauthorized access.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">NotFound</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Resource not found.</span><span class="dl">"</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Unknown error.</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">status</span> <span class="o">=</span> <span class="nx">HttpStatus</span><span class="p">.</span><span class="nx">OK</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">handleResponse</span><span class="p">(</span><span class="nx">status</span><span class="p">));</span> <span class="c1">// "Request was successful."</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>위의 코드는 아래와 같이 컴파일된다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">handleResponse</span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch </span><span class="p">(</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">200</span> <span class="cm">/* OK */</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Request was successful.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">400</span> <span class="cm">/* BadRequest */</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Bad request.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">401</span> <span class="cm">/* Unauthorized */</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Unauthorized access.</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">404</span> <span class="cm">/* NotFound */</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Resource not found.</span><span class="dl">"</span><span class="p">;</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="dl">"</span><span class="s2">Unknown error.</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">status</span> <span class="o">=</span> <span class="mi">200</span> <span class="cm">/* OK */</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">handleResponse</span><span class="p">(</span><span class="nx">status</span><span class="p">));</span> <span class="c1">// "Request was successful."</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>컴파일 타임에 상수 값으로 대체되어, 성능 최적화 가능</li>
  <li>But, 디버깅 시에 원래 열거형 이름 확인 불가</li>
</ul>

<h3 id="4️⃣-문자열-및-숫자-혼합-열거형">4️⃣ 문자열 및 숫자 혼합 열거형</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kr">enum</span> <span class="nx">Mixed</span> <span class="p">{</span>
  <span class="nx">No</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nx">Yes</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">YES</span><span class="dl">"</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Mixed</span><span class="p">.</span><span class="nx">No</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Mixed</span><span class="p">.</span><span class="nx">Yes</span><span class="p">);</span> <span class="c1">// "YES"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-제네릭">🚀 제네릭</h2>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">코드 작성 시점이 아닌 사용 시점에 타입을 정의하는데 이러한 점은 재사용 가능한 컴포넌트를 작성할 때 유용하고 타입 안정성을 유지하면서 유연하게 작성할 수 있음</code></p>
</blockquote>

<h3 id="1️⃣-제네릭-함수">1️⃣ 제네릭 함수</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">identity</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 호출 시점 타입 지정 !</span>
<span class="kd">let</span> <span class="nx">output1</span> <span class="o">=</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">(</span><span class="dl">"</span><span class="s2">myString</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">output2</span> <span class="o">=</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">output1</span><span class="p">);</span> <span class="c1">// "myString"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">output2</span><span class="p">);</span> <span class="c1">// 123</span>

<span class="c1">// 타입 추론</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">identity</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>       <span class="c1">// 42</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">identity</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">));</span>  <span class="c1">// "hello"</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="2️⃣-제네릭-인터페이스">2️⃣ 제네릭 인터페이스</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">PlayerIdentityFn</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="p">(</span><span class="na">arg</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">playerIdentity</span><span class="p">:</span> <span class="nx">PlayerIdentityFn</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">playerName</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">playerName</span><span class="p">;</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">playerIdentity</span><span class="p">(</span><span class="dl">"</span><span class="s2">Marcus Rashford</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Marcus Rashford</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">playerIdentity</span><span class="p">(</span><span class="dl">"</span><span class="s2">Bruno Fernandes</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Bruno Fernandes</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-제네릭-클래스">3️⃣ 제네릭 클래스</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">PlayerStats</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="na">initialStat</span><span class="p">:</span> <span class="nx">T</span><span class="p">;</span>
  <span class="nl">add</span><span class="p">:</span> <span class="p">(</span><span class="na">x</span><span class="p">:</span> <span class="nx">T</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">T</span><span class="p">;</span>

  <span class="nf">constructor</span><span class="p">(</span><span class="na">initialStat</span><span class="p">:</span> <span class="nx">T</span><span class="p">,</span> <span class="na">add</span><span class="p">:</span> <span class="p">(</span><span class="na">x</span><span class="p">:</span> <span class="nx">T</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="nx">T</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">initialStat</span> <span class="o">=</span> <span class="nx">initialStat</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="nx">add</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">goalStats</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PlayerStats</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">goalStats</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">goalStats</span><span class="p">.</span><span class="nx">initialStat</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span> <span class="c1">// 5</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4️⃣-제네릭-제약-조건">4️⃣ 제네릭 제약 조건</h3>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kr">interface</span> <span class="nx">Player</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">goals</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">printPlayerGoals</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">T</span> <span class="kd">extends</span> <span class="nx">Player</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">player</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">player</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2"> has scored </span><span class="p">${</span><span class="nx">player</span><span class="p">.</span><span class="nx">goals</span><span class="p">}</span><span class="s2"> goals.`</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">};</span>

<span class="nf">printPlayerGoals</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Marcus Rashford</span><span class="dl">"</span><span class="p">,</span> <span class="na">goals</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">team</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Man Utd</span><span class="dl">"</span> <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>Player 인터페이스는 <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">goals</code> 두 개의 속성을 가짐</li>
  <li><code class="language-plaintext highlighter-rouge">printPlayerGoals</code> 함수는 제네릭 타입 변수 <code class="language-plaintext highlighter-rouge">T</code>를 사용하며, 이 제네릭 타입은 Player 인터페이스를 확장함
    <ul>
      <li>➡️ <code class="language-plaintext highlighter-rouge">T</code>는 Player 인터페이스와 동일하거나 이를 확장하는 타입이어야 함</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">printPlayerGoals</code> 함수를 호출 할 때, Player 인터페이스는 <code class="language-plaintext highlighter-rouge">name</code>과 <code class="language-plaintext highlighter-rouge">goals</code> 속성만 포함하고 있기때문에 함수에서 <code class="language-plaintext highlighter-rouge">player.team</code>에 접근하려 하면 타입스크립트는 <code class="language-plaintext highlighter-rouge">team</code> 속성이 인터페이스에 정의되어 있지 않아 에러가 발생하는데 이러한 것이 타입 제약이라고 함</li>
</ul>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="TypeScript" /><category term="TypeScript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[JavaScript] - 기본 문법 (4)</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(4)/" rel="alternate" type="text/html" title="[JavaScript] - 기본 문법 (4)" /><published>2024-07-18T00:00:00+09:00</published><updated>2024-07-18T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC%20(4)</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(4)/"><![CDATA[<h2 id="-생성자-함수---프로토타입">🚀 생성자 함수 /  프로토타입</h2>
<p><span><code class="language-plaintext highlighter-rouge">새로운 객체를 생성하고 초기화하는 함수</code></span></p>

<blockquote>
  <ul>
    <li><strong>생성자 함수</strong>는 내부에서 <code class="language-plaintext highlighter-rouge">this</code>를 사용하여 생성될 객체의 속성 정의</li>
    <li><strong>프로토타입</strong>을 사용하여 메서드를 공유하여 코드의 재사용성을 높임
      <ul>
        <li>모든 객체는 프로토타입 객체로부터 속성과 메서드를 상속 받음</li>
      </ul>
    </li>
  </ul>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">Bellingham</span><span class="p">(</span><span class="nx">born</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">club</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">born</span> <span class="o">=</span> <span class="nx">born</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">height</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">club</span> <span class="o">=</span> <span class="nx">club</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">Bellingham</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPersonInfo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">born</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">club</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myBellingham</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="s2">`England`</span><span class="p">,</span> <span class="s2">`186cm`</span><span class="p">,</span> <span class="s2">`Real-Madrid`</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">MyBellingham</span><span class="p">.</span><span class="nf">getPersonInfo</span><span class="p">());</span> <span class="c1">// England 186cm Real-Madrid</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-클래스">🚀 클래스</h2>
<p><span><code class="language-plaintext highlighter-rouge">클래스는 ES6부터 도입하였고, 객체 지향 프로그래밍을 쉽게 구현할 수 있게 해줌</code></span></p>

<h3 id="1️⃣-클래스-선언">1️⃣ 클래스 선언</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">greet</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello, </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">ronaldo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Ronaldo</span><span class="dl">'</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
<span class="nx">ronaldo</span><span class="p">.</span><span class="nf">greet</span><span class="p">();</span> <span class="c1">// Hello, Ronaldo</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li>✔️ constructor는 반드시 있어야함</li>
</ul>

<h3 id="2️⃣-클래스-선언은-함수-선언과-달리-호이스팅-">2️⃣ 클래스 선언은 함수 선언과 달리 호이스팅 ❎</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">bellingham</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Bellingham</span><span class="dl">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'Person' before initialization</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="3️⃣-상속">3️⃣ 상속</h3>
<blockquote>
  <p>클래스는 <code class="language-plaintext highlighter-rouge">extends</code> 키워드를 사용하여 다른 클래스 상속 가능</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Employee</span> <span class="kd">extends</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">job</span> <span class="o">=</span> <span class="nx">job</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">work</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> is working as a </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">job</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">kane</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="p">(</span><span class="dl">'</span><span class="s1">Kane</span><span class="dl">'</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="dl">'</span><span class="s1">soccer-player</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">kane</span><span class="p">.</span><span class="nf">greet</span><span class="p">();</span> <span class="c1">// Hello, kane</span>
<span class="nx">kane</span><span class="p">.</span><span class="nf">work</span><span class="p">();</span>  <span class="c1">// kane is working as a soccer-player</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4️⃣-static">4️⃣ static</h3>
<blockquote>
  <p>static 키워드를 사용하여 클래스의 인스턴스가 아닌 클래스 자체에 속하는 메서드와 속성을 정의할 수 있음</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">UserService</span> <span class="p">{</span>
  <span class="kd">static</span> <span class="k">async</span> <span class="nf">login</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nf">isLogin</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">){</span>
          <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">로그인하셨습니다</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">};</span>
    <span class="p">}</span>

    <span class="c1">// 회원가입</span>
    <span class="kd">static</span> <span class="k">async</span> <span class="nf">signup</span><span class="p">(</span><span class="nx">userData</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nf">isSignup</span><span class="p">(</span><span class="nx">userData</span><span class="p">){</span>
          <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">회원가입하셨습니다</span><span class="dl">"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">userData</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">UserService</span><span class="p">.</span><span class="nf">login</span><span class="p">(</span><span class="dl">"</span><span class="s2">kanekane</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1234</span><span class="p">));</span> <span class="c1">// 로그인하셨습니다</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">UserService</span><span class="p">.</span><span class="nf">signup</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bellingham</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">22</span> <span class="p">}));</span> <span class="c1">// 회원가입하셨습니다</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="5️⃣-getter--setter">5️⃣ getter / setter</h3>
<blockquote>
  <p>클래스 내 속성에 접근 및 설정을 할 수 있음</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Person</span> <span class="p">{</span>
  <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">get</span> <span class="nf">name</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_name</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">set</span> <span class="nf">name</span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">newName</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="nx">newName</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Messi</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Messi</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Walker</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Walker</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="6️⃣-오버라이딩">6️⃣ 오버라이딩</h3>
<blockquote>
  <p>상위 클래스 메서드를 하위 클래스에 재정의(오버라이딩) 가능</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">class</span> <span class="nc">Club</span> <span class="p">{</span>
  <span class="nf">name</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Club Name</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Soccer</span> <span class="kd">extends</span> <span class="nc">Club</span> <span class="p">{</span>
  <span class="nf">name</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Manchester UTD</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">myClub</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Soccer</span><span class="p">();</span>
<span class="nx">myClub</span><span class="p">.</span><span class="nf">name</span><span class="p">();</span> <span class="c1">// Manchester UTD</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-내장-객체">🚀 내장 객체</h2>
<h3 id="1️⃣-표준-내장-객체">1️⃣ 표준 내장 객체</h3>
<p><span><code class="language-plaintext highlighter-rouge">표준 내장 객체는 자바스크립트 엔진에 기본으로 내장되어있고, 별도 선언 없이 사용 가능</code></span></p>
<ul>
  <li>Object</li>
  <li>Function</li>
  <li>Array</li>
  <li>String</li>
  <li>Boolean</li>
  <li>Number</li>
  <li>Math</li>
  <li>Date</li>
  <li>RegEXP</li>
</ul>

<h3 id="2️⃣-배열-내장-객체">2️⃣ 배열 내장 객체</h3>
<blockquote>
  <p>주요 메서드</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">push()</code> ➡️ 배열 끝에 요소 추가</li>
  <li><code class="language-plaintext highlighter-rouge">pop()</code> ➡️ 배열 끝에 요소 제거</li>
  <li><code class="language-plaintext highlighter-rouge">shift()</code> ➡️ 배열 첫 번째 요소 제거</li>
  <li><code class="language-plaintext highlighter-rouge">unshift()</code> ➡️ 배열 앞에 요소 추가</li>
  <li><code class="language-plaintext highlighter-rouge">join()</code> ➡️ 배열을 매개변수와 조합하여 합침</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code> ➡️ 배열 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">reverse()</code> ➡️ 배열 역순으로 뒤집음</li>
  <li><code class="language-plaintext highlighter-rouge">mpa()</code>, <code class="language-plaintext highlighter-rouge">filter()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code> ➡️ 배열 순회하여 작업 수행</li>
</ul>

<h3 id="3️⃣-문자-내장-객체">3️⃣ 문자 내장 객체</h3>
<blockquote>
  <p>주요 메서드</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">charAt()</code> ➡️ 특정 인덱스 문자 반환</li>
  <li><code class="language-plaintext highlighter-rouge">split()</code> ➡️ 문자열을 <code class="language-plaintext highlighter-rouge">separator</code> 기준으로 분리하여 배열 만듬</li>
  <li><code class="language-plaintext highlighter-rouge">concat()</code> ➡️ 매개변수로 전달되어진 문자열을 하나의 문자열로 합침</li>
  <li><code class="language-plaintext highlighter-rouge">indexOf()</code> ➡️ 특정 문자의 인덱스를 반환</li>
  <li><code class="language-plaintext highlighter-rouge">includes()</code> ➡️ 문자열에 특정 문자열이 포함되어 있는지 확인</li>
  <li><code class="language-plaintext highlighter-rouge">slice()</code> ➡️ 문자열의 일부분을 추출</li>
  <li><code class="language-plaintext highlighter-rouge">toUpperCase()</code>, <code class="language-plaintext highlighter-rouge">toLowerCase(()</code> ➡️ 대소문자 변환</li>
  <li><code class="language-plaintext highlighter-rouge">substring()</code> ➡️ 부분 문자열 반환</li>
</ul>

<h3 id="4️⃣-math-객체">4️⃣ Math 객체</h3>
<blockquote>
  <p>주요 메서드</p>
</blockquote>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Math.abs()</code> ➡️ 절대값 반환</li>
  <li><code class="language-plaintext highlighter-rouge">Math.ceil()</code>, <code class="language-plaintext highlighter-rouge">Math.floor()</code> ➡️ 올림, 내림</li>
  <li><code class="language-plaintext highlighter-rouge">Math.max()</code>, <code class="language-plaintext highlighter-rouge">Math.min()</code> ➡️ 최대값, 최소값 반환</li>
  <li><code class="language-plaintext highlighter-rouge">Math.random()</code> ➡️ 0과 1 사이의 난수 생성</li>
  <li><code class="language-plaintext highlighter-rouge">Math.min()</code> ➡️ 주어진 숫자 중 제일 낮은 숫자를 반환</li>
  <li><code class="language-plaintext highlighter-rouge">Math.round()</code> ➡️ 소수점을 반올림</li>
  <li><code class="language-plaintext highlighter-rouge">Math.floor()</code> ➡️ 소수점을 내림</li>
  <li><code class="language-plaintext highlighter-rouge">Math.ceil()</code> ➡️ 소수점을 올림</li>
  <li><code class="language-plaintext highlighter-rouge">Math.abs()</code> ➡️ 절대값을 반환</li>
  <li><code class="language-plaintext highlighter-rouge">Math.pow(x, y)</code> ➡️ x의 y 제곱을 반환</li>
</ul>

<h2 id="-동기--비동기">🚀 동기 / 비동기</h2>
<p><span><code class="language-plaintext highlighter-rouge">동기 : 코드가 순차적으로 실행, 이전 코드 완료전 까지 다음 코드 실행 X</code></span><br />
<span><code class="language-plaintext highlighter-rouge">비동기 : 코드가 병렬로 실행, 다른 코드 실행 방해 X</code></span></p>

<h3 id="1️⃣-콜백함수">1️⃣ 콜백함수</h3>
<p><span><code class="language-plaintext highlighter-rouge">콜백 함수는 다른 함수의 인수로 전달되어 실행되는 함수</code></span></p>

<ul>
  <li>동기식 콜백(synchronous callback)
    <ul>
      <li>호출되는 즉시 실행되고, 그 작업이 완료될 때까지 다음 코드를 실행 ❎</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">syncCallback</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">콜백 전</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">callback</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">콜백 후</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">syncCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">내부 콜백</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// 출력:</span>
<span class="c1">// 콜백 전</span>
<span class="c1">// 내부 콜백</span>
<span class="c1">// 콜백 후</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>비동식 콜백(asynchromous callback)
    <ul>
      <li>비동기식 콜백은 호출된 후 비동기 작업이 완료된 후에 실행</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nf">asyncCallback</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">콜백 전</span><span class="dl">"</span><span class="p">);</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">callback</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">내부 콜백</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">콜백 후</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">asyncCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">콜백 실행됨</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// 출력:</span>
<span class="c1">// 콜백 전</span>
<span class="c1">// 콜백 후</span>
<span class="c1">// 1초 후</span>
<span class="c1">// 콜백 실행됨</span>
<span class="c1">// 내부 콜백</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="2️⃣-promise-then">2️⃣ Promise Then</h3>
<p><span><code class="language-plaintext highlighter-rouge">Promise는 비동기 작업의 완료 또는 실패를 나타내는 객체, then 메서드 사용하여 처리를 정의</code></span></p>

<blockquote>
  <p>Promise는 3개의 상태를 가짐</p>
</blockquote>

<ul>
  <li>대기 : 초기상태</li>
  <li>이행 : 연산 완료</li>
  <li>거부 : 연산 실패</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">success</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// 작업 성공 여부</span>

    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">Data fetched successfully</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 이행 상태</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">reject</span><span class="p">(</span><span class="dl">'</span><span class="s1">Error in fetching data</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 거부 상태</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="o">&gt;&gt;</span> <span class="nx">then</span> <span class="nx">메서드</span> <span class="nx">체이닝</span>
  <span class="o">-</span> <span class="nx">첫</span> <span class="nx">번째</span> <span class="nx">인수는</span> <span class="nx">프로미스가</span> <span class="nx">이행된</span> <span class="nx">경우에</span> <span class="nx">호출되는</span> <span class="nx">콜백</span> <span class="nx">함수</span>
  <span class="o">-</span> <span class="nx">두</span> <span class="nx">번째</span> <span class="nx">인수는</span> <span class="nx">거부된</span> <span class="nx">경우에</span> <span class="nx">호출되는</span> <span class="nx">콜백</span> <span class="nx">함수</span>
  <span class="o">-</span> <span class="nx">각</span> <span class="nx">then은</span> <span class="nx">새로운</span> <span class="nx">프로미스</span> <span class="nx">객체를</span> <span class="nx">반환하여</span> <span class="nx">체이닝을</span> <span class="nx">가능하게</span> <span class="nx">함</span> 
  <span class="nx">promise</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// Data fetched successfully</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="c1">// Error in fetching data</span>
    <span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3️⃣-async-await">3️⃣ async await</h3>
<p><span><code class="language-plaintext highlighter-rouge">async await는 Promise Then을 편하게 사용하게 해줌</code></span></p>

<ul>
  <li><strong>async</strong>는 항상 Promise를 반환</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>  <span class="k">async</span> <span class="kd">function</span> <span class="nf">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 이 함수는 Promise를 반환</span>
    <span class="k">return</span> <span class="dl">'</span><span class="s1">Data fetched</span><span class="dl">'</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nf">fetchData</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span> <span class="c1">// Data fetched</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><strong>await</strong>는 Promise가 처리될 때까지 함수 실행을 중지시켜줌</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>  <span class="k">async</span> <span class="kd">function</span> <span class="nf">fetchData</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">resolve</span><span class="p">(</span><span class="dl">'</span><span class="s1">Data fetched</span><span class="dl">'</span><span class="p">);</span>
      <span class="p">},</span> <span class="mi">2000</span><span class="p">);</span> <span class="mi">2</span><span class="nx">초</span> <span class="nx">중지</span> <span class="nx">시켜줌</span>
    <span class="p">});</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="c1">// Data fetched</span>
  <span class="p">}</span>

  <span class="nf">fetchData</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="JavaScript" /><category term="JavaScript" /><summary type="html"><![CDATA[🚀 생성자 함수 / 프로토타입 새로운 객체를 생성하고 초기화하는 함수]]></summary></entry><entry><title type="html">[JavaScript] - 기본 문법 (3)</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(3)/" rel="alternate" type="text/html" title="[JavaScript] - 기본 문법 (3)" /><published>2024-07-17T00:00:00+09:00</published><updated>2024-07-17T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC%20(3)</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(3)/"><![CDATA[<style>
  .declare, .expression, .arrow, .closure {
    color: #2593FF;
    font-weight: bold;
  }

  .responsive-link-card {
    display: flex;
    align-items: center;
    border: 1px solid #d0d0d0;
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    text-decoration: none;
    color: inherit;
    margin-top: 20px;
    padding: 10px;
  }
  
  .responsive-link-card img {
    width: 150px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 15px;
  }
  
  .responsive-link-content {
    display: flex;
    flex-direction: column;
  }
  
  .responsive-link-content h2 {
    margin: 0;
    font-size: 1.2em;
  }
  
  .responsive-link-content p {
    margin: 5px 0 10px;
    color: gray;
    font-size: 0.9em;
  }
  
  .responsive-link-content small {
    color: #777;
  }
  
  @media (max-width: 768px) {
    .responsive-link-card {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .responsive-link-card img {
      margin-right: 0;
      margin-bottom: 10px;
    }

    .responsive-link-content {
      width: 100%;
    }
  }
</style>

<h2 id="-함수">🚀 함수</h2>
<h3 id="1️⃣-함수-선억식">1️⃣ 함수 선억식</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">function</code> 키워드를 사용하여 함수 정의</li>
  <li>호이스팅 ✅, 정의되기 전 호출 가능
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>  <span class="kd">function</span> <span class="nf">함수이름</span><span class="p">(</span><span class="nx">매개변수</span><span class="p">){</span>
<span class="c1">//</span>
<span class="k">return</span> <span class="nx">반한값</span><span class="p">;</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="2️⃣-함수-표현식">2️⃣ 함수 표현식</h3>
<ul>
  <li>변수에 익명 함수나 기명함수를 할당하는 방식으로 정의</li>
  <li>호이스팅 ❎, 정의된 후에만 호출 가능
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>  <span class="kd">const</span> <span class="nx">함수이름</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">매개변수</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">//</span>
<span class="k">return</span> <span class="nx">반한값</span><span class="p">;</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h4 id="️-익명-함수--이름-없는-함수-주로-콜백-함수로-사용">✔️ <strong>익명 함수</strong> ? 이름 없는 함수, 주로 콜백 함수로 사용</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="kd">const</span> <span class="nx">익명함수</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//</span>
  <span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h4 id="️-기명-함수--이름-있는-함수-스택-트레이스에서-함수-이름-확인-가능">✔️ <strong>기명 함수</strong> ? 이름 있는 함수, 스택 트레이스에서 함수 이름 확인 가능</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="kd">const</span> <span class="nx">기명함수</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="nf">함수이름</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//</span>
  <span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h3 id="3️⃣-화살표-함수">3️⃣ 화살표 함수</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">=&gt;</code> 문법 사용해 간결하게 함수 정의 가능</li>
  <li><code class="language-plaintext highlighter-rouge">this</code> 바인딩이 정적으로 결정</li>
  <li><code class="language-plaintext highlighter-rouge">arguments</code> 객체 사용 불가</li>
  <li>생성자 함수로 사용 불가</li>
  <li>메소드로 사용 불가</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>  <span class="kd">const</span> <span class="nx">함수이름</span> <span class="o">=</span> <span class="p">(</span><span class="nx">매개변수</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//</span>
    <span class="k">return</span> <span class="nx">반환값</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">함수이름</span> <span class="o">=</span> <span class="nx">매개변수</span> <span class="o">=&gt;</span> <span class="nx">반한값</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-호이스팅">🚀 호이스팅</h2>
<p><span><code class="language-plaintext highlighter-rouge">자바스크립트에서 함수나 변수가 선언된 위치와 상관없이 코드가 실행되기 전에 해당 선언이 최상단으로 끌어올려지는 동작을 의미</code></span></p>

<h3 id="1️⃣-변수-호이스팅">1️⃣ 변수 호이스팅</h3>
<ul>
  <li>변수는 <strong>선언 부분</strong>만 호이스팅 ✅, <strong>할당 부분</strong>은 호이스팅 ❎</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span> <span class="c1">// undefined</span>
  <span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hi</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span> <span class="c1">// 'Hi'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">let</code>과 <code class="language-plaintext highlighter-rouge">const</code>는 <strong>TDZ(Temporal Dead Zone)</strong>로 인해 선언 전에 참조 불가 ❗️ <br />
  (<code class="language-plaintext highlighter-rouge">let</code>과 <code class="language-plaintext highlighter-rouge">const</code>로 선언된 변수는 코드가 실행되기 전에 선언이 메모리에 등록이되지만 접근이 불가하다)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myLetVar</span><span class="p">);</span> <span class="c1">// ReferenceError: myLetVar is not defined</span>
  <span class="kd">let</span> <span class="nx">myLetVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myLetVar</span><span class="p">);</span> <span class="c1">// 'Hello'</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myConstVar</span><span class="p">);</span> <span class="c1">// ReferenceError: myConstVar is not defined</span>
  <span class="kd">const</span> <span class="nx">myConstVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">myConstVar</span><span class="p">);</span> <span class="c1">// 'Hello'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2️⃣-함수-호이스팅">2️⃣ 함수 호이스팅</h3>
<ul>
  <li><span class="declare">함수 선언식</span>은 <strong>전체</strong>가 호이스팅 ✅</li>
  <li><span class="expression">함수 표현식</span>, <span class="arrow">화살표 함수</span>는 <strong>함수 선언 부분</strong>만 호이스팅 ✅, <strong>함수 할당 부분</strong> 호이스팅 ❎</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>  <span class="c">&lt;!--</span> <span class="nx">함수</span> <span class="nx">선언식</span> <span class="o">--&gt;</span>
  <span class="nf">myHoisting</span><span class="p">();</span> <span class="c1">// 'Hi'</span>
  <span class="kd">function</span> <span class="nf">myHoisting</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c">&lt;!--</span> <span class="nx">함수</span> <span class="nx">표현식</span> <span class="o">--&gt;</span>
  <span class="nf">myHoisting</span><span class="p">();</span> <span class="c1">// TypeError : myHoisting is not a function</span>
  <span class="kd">var</span> <span class="nx">myHoisting</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c">&lt;!--</span> <span class="nx">화살표</span> <span class="nx">함수</span> <span class="o">--&gt;</span>
  <span class="nf">myHoisting</span><span class="p">();</span> <span class="c1">// TypeError : myHoisting is not a function</span>
  <span class="kd">const</span> <span class="nx">MyHoisting</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hi</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="-컨텍스트">🚀 컨텍스트</h2>
<p><span><code class="language-plaintext highlighter-rouge">실행 컨텍스트는 자바스크립트 코드가 실행되는 환경을 제공하는 객체</code></span></p>

<h3 id="1️⃣-실행-컨텍스트-생성-및-실행">1️⃣ 실행 컨텍스트 생성 및 실행</h3>
<ul>
  <li><strong>환경 레코드(Environment Record)</strong> : 실행 컨텍스트가 생성될 때 변수, 함수 선언, 매개 변수 등의 정보를 기록하는 객체
    <ul>
      <li>생성 단계 : 현재 컨텍스트의 선언문을 환경 레코드에 기록
        <ul>
          <li>완성된 기록 : <code class="language-plaintext highlighter-rouge">var</code> 키워드로 선언된 변수와 함수 선언은 초기화 전에도 참조 가능</li>
          <li>미완성된 기록 : <code class="language-plaintext highlighter-rouge">let</code>과 <code class="language-plaintext highlighter-rouge">const</code>로 선언된 변수는 TDZ로 인해 초기화 완료되기 전까지 참조 불가</li>
        </ul>
      </li>
      <li>실행 단계 : 생성 단계에서 기록된 환경 레코드를 참조해서 코드를 실행하거나 업데이트</li>
    </ul>
  </li>
</ul>

<h3 id="2️⃣-렉시컬-스코프lexical-scope">2️⃣ 렉시컬 스코프(Lexical Scope)</h3>
<ul>
  <li>자바스크립트에서 변수의 유효 범위는 렉시컬 스코프를 따름</li>
  <li>즉, 함수가 <strong>선언된 위치에 따라</strong> 상위 스코프가 결정되며, 이는 함수가 호출될 때가 아니라 정의될 때 결정</li>
  <li>함수 내부의 변수는 해당 함수가 정의된 위치에 따라 상위 스코프를 참조 ❗️</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>  <span class="kd">var</span> <span class="nx">globalVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">gloabal</span><span class="dl">'</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nf">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">outerVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">outer</span><span class="dl">'</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nf">inner</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">innerVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">inner</span><span class="dl">'</span><span class="p">;</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">globalVar</span><span class="p">);</span> <span class="c1">// 'global'</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">outerVar</span><span class="p">);</span> <span class="c1">// 'outer'</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">innerVar</span><span class="p">);</span> <span class="c1">// 'inner'</span>
    <span class="p">}</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>inner 함수는 outer 함수의 스코프 체인 내에 있어서 outer 함수와 전역 스코프의 변수에 접근 가능</li>
  <li>inner 함수는 globalVar와 outerVar에 접근할 수 있으며, 이것을 <strong>렉시컬 스코프</strong>라고 한다.</li>
</ul>

<h3 id="3️⃣-outer">3️⃣ Outer</h3>
<ul>
  <li>외부 렉시컬 스코프를 참조하는 객체, 함수나 블록 내에서 선언된 변수들이 상위 스코프의 변수를 참조할 수 있게 해줌</li>
  <li>모든 함수가 생성될 때 자신의 외부 렉시컬 환경을 기억하는데, 이 외부 렉시컬 환경을 통해 함수는 자신이 정의된 위치의 상위 스코프에 접근 가능</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre>  <span class="kd">function</span> <span class="nf">outer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">outerVar</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Here Outer</span><span class="dl">'</span><span class="p">;</span>

    <span class="kd">function</span> <span class="nf">inner</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">outerVar</span><span class="p">);</span> <span class="c1">// 'Here Outer'</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kd">const</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="nf">outer</span><span class="p">();</span>
  <span class="nf">innerFunc</span><span class="p">();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>inner 함수는 outer 함수 내부의 정의되어있어서 outer 함수의 외부 렉시컬 스코프에 접근 가능</li>
  <li>JS의 <span class="closure">클로저</span> 특성에 의해 outer 함수가 실행 컨텍스트 종료 후에도 outer 함수의 outerVar에 접근 할 수 있음</li>
</ul>

<h2 id="-객체">🚀 객체</h2>
<p><span><code class="language-plaintext highlighter-rouge">객체는 자바스크립트에서 데이터와 기능을 키-값 쌍의 형태로 구성된 여러 개의 속성을 저장하는 데이터 구조</code></span></p>

<h3 id="특징">특징</h3>
<ul>
  <li>객체는 키(key)와 값(value)로 이루어진 속성(properties)을 가짐</li>
  <li>객체는 동적으로 속성을 추가 및 삭제 가능</li>
  <li>객체는 다른 객체를 속성으로 가질 수 있음</li>
  <li>객체는 함수를 속성으로 가질 수 있음 ➡️ 메서드</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre>  <span class="kd">let</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Jude Bellingham</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="dl">"</span><span class="s2">22</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">team</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">country</span><span class="p">:</span> <span class="dl">"</span><span class="s2">spain</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">club</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Real-Madrid</span><span class="dl">"</span>
    <span class="p">}</span>
    <span class="nl">job</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Soccer Player</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">introduce</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">은 </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">team</span><span class="p">.</span><span class="nx">club</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">job</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">이다.</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">};</span>

  <span class="c1">// 동적 속성 Control</span>
  <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">186cm</span><span class="dl">"</span> <span class="c1">// 추가</span>
  <span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span> <span class="c1">// 삭제</span>

  <span class="c1">// 중첩 객체 속성 접근</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">team</span><span class="p">.</span><span class="nx">country</span><span class="p">);</span> <span class="c1">// Spain</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">team</span><span class="p">.</span><span class="nx">club</span><span class="p">);</span> <span class="c1">// Real-Madrid</span>

  <span class="c1">// 메서드 호출</span>
  <span class="nx">person</span><span class="p">.</span><span class="nf">introduce</span><span class="p">();</span> <span class="c1">// Jude Bellingham은 Real-Madrid Soccer Player이다.</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <h3 id="참조">[참조]</h3>
</blockquote>

<p>MDN 공식 문서 - 호이스팅, 컨텍스트 <br /></p>
<div class="responsive-link-card" onclick="window.open('https://developer.mozilla.org/ko/docs/Glossary/Hoisting', '_blank');">
  <div>
    <img src="./assets/img/posts/training/mozilla-logo.png" alt="mozilla" />
  </div>
  <div class="responsive-link-content">
    <h2>JavaScript | MDN</h2>
    <p>JavaScript</p>
    <small>developer.mozilla.org</small>
  </div>
</div>
<p><br /></p>

<p>한’s 개발 블로그 - 컨텍스트 <br />
<a href="https://hans-j.tistory.com/98">https://hans-j.tistory.com/98</a></p>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="JavaScript" /><category term="JavaScript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[JavaScript] - 기본 문법 (2)</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(2)/" rel="alternate" type="text/html" title="[JavaScript] - 기본 문법 (2)" /><published>2024-07-16T00:00:00+09:00</published><updated>2024-07-16T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC%20(2)</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC-(2)/"><![CDATA[<h2 id="-자료형의-종류">🚀 자료형의 종류</h2>
<p><span><code class="language-plaintext highlighter-rouge">자료형은 프로그래밍에서 변수나 값이 가질 수 있는 데이터의 종류를 의미</code></span></p>

<h3 id="1️⃣-기본-자료형">1️⃣ 기본 자료형</h3>
<blockquote>
  <ul>
    <li>숫자형<br /></li>
    <li>문자열형<br /></li>
    <li>논리형<br /></li>
  </ul>
</blockquote>

<h3 id="2️⃣-특수-자료형">2️⃣ 특수 자료형</h3>
<blockquote>
  <ul>
    <li>undefined<br /></li>
    <li>심볼형<br /></li>
    <li>null<br /></li>
  </ul>
</blockquote>

<h3 id="3️⃣-참조-자료형">3️⃣ 참조 자료형</h3>
<blockquote>
  <ul>
    <li>배열<br /></li>
    <li>함수<br /></li>
    <li>객체<br /></li>
    <li>typeof<br /></li>
  </ul>
</blockquote>

<h2 id="-연산자의-종류">🚀 연산자의 종류</h2>
<p><span><code class="language-plaintext highlighter-rouge">프로그래밍에서 값(피연산자)들에 대해 특정 작업을 수행하는 데 사용되는 기호 또는 키워드를 의미</code></span></p>

<h3 id="1️⃣-산술-연산자">1️⃣ 산술 연산자</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">+</code> : 피연산자 덧셈<br />
<code class="language-plaintext highlighter-rouge">-</code> : 피연산자 뺄셈<br />
<code class="language-plaintext highlighter-rouge">*</code> : 피연산자 곱셈<br />
<code class="language-plaintext highlighter-rouge">/</code> : 피연산자 나눗셈<br />
<code class="language-plaintext highlighter-rouge">%</code> : 피연산자끼리 나누어 떨어지는 나머지<br /></p>
</blockquote>

<h3 id="2️⃣-증감-연산자-️-데이터가-할당-된-변수만-피연산자로-사용-가능-️">2️⃣ 증감 연산자 ➡️ 데이터가 할당 된 변수만 피연산자로 사용 가능 ❗️</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">++</code> : 숫자형 데이터 1 증가<br />
<code class="language-plaintext highlighter-rouge">--</code> : 숫자형 데이터 1 감소<br /></p>
</blockquote>

<ul>
  <li>추가로, 증감 연산자는 위치에 따라 후치 연산자, 전치 연산자로도 나눌 수 있음
    <ul>
      <li>후치 연산자 : 변수 뒤 위치 ✔️ 연산 끝난 후 변수 값 변경</li>
      <li>전치 연산자 : 변수 앞 위치 ✔️ 변수 값 먼저 변경 후 다른 연산 수행</li>
    </ul>
  </li>
</ul>

<h3 id="3️⃣-대입-연산자">3️⃣ 대입 연산자</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">=</code> : 할당 연산자<br />
<code class="language-plaintext highlighter-rouge">+=</code>, <code class="language-plaintext highlighter-rouge">-=</code>, <code class="language-plaintext highlighter-rouge">*=</code>, <code class="language-plaintext highlighter-rouge">/=</code>, <code class="language-plaintext highlighter-rouge">%=</code> : 복합 대입 연산자<br /></p>
</blockquote>

<h3 id="4️⃣-비교-연산자">4️⃣ 비교 연산자</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">==</code> : 동등 ➡️ 피연산자들의 값 동일 할 때 true 반환<br /><br />
<code class="language-plaintext highlighter-rouge">===</code> : 동치 ➡️ 피연산자들의 값, 자료형 동일 할 때 true 반환<br /><br />
<code class="language-plaintext highlighter-rouge">!=</code> : 부등 ➡️ 피연산자들의 값 다를 때 true 반환<br /><br />
<code class="language-plaintext highlighter-rouge">!==</code> : 불일치 ➡️ 피연산자들의 값, 자료형 다를 때 true 반환<br /><br />
<code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code>, <code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code> : 크기 비교<br /></p>
</blockquote>

<h3 id="5️⃣-삼항-연산자---세-개의-피연산자-필요-조건에-따라-두-값-중-1개-반환-️">5️⃣ 삼항 연산자 - 세 개의 피연산자 필요, 조건에 따라 두 값 중 1개 반환 ❗️</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">condition ? exprIfTrue : exprIfFalse;</code> <br /></p>
</blockquote>

<ul>
  <li>주로 간단한 조건부 로직 작성 시 사용 !</li>
</ul>

<h3 id="6️⃣-논리-연산자">6️⃣ 논리 연산자</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> : and<br />
<code class="language-plaintext highlighter-rouge">||</code> : or<br />
<code class="language-plaintext highlighter-rouge">!</code> : not<br /></p>
</blockquote>

<h2 id="-조건문--반복문">🚀 조건문 / 반복문</h2>

<h3 id="1️⃣-조건문-️-특정-조건-판별하여-각각-다른-로직-실행">1️⃣ 조건문 ➡️ 특정 조건 판별하여 각각 다른 로직 실행</h3>
<blockquote>
  <p><strong>if ~ else문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>  <span class="k">if </span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 조건이 참일 때 실행되는 로직</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if </span><span class="p">(</span><span class="nx">anotherCondition</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 또 다른 조건이 참일 때 실행되는 로직</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// 위 조건들이 모두 거짓일 때 실행되는 로직</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>if문은 조건 참일 때 해당 로직 실행 <br /></li>
  <li>else문은 if 조건이 거짓일 때 해당 로직 실행 <br /></li>
  <li>else if문은 또 다른 조건 참일 때 해당 로직들 실행 <br /></li>
</ul>

<blockquote>
  <p><strong>switch</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre>  <span class="k">switch </span><span class="p">(</span><span class="nx">expression</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nx">value1</span><span class="p">:</span>
    <span class="c1">// value1과 일치할 때 반환활 값</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="k">case</span> <span class="nx">value2</span><span class="p">:</span>
    <span class="c1">// value2와 일치할 때 반환활 값</span>
    <span class="k">break</span><span class="p">;</span>
  <span class="nl">default</span><span class="p">:</span>
    <span class="c1">// 어떤 case와도 일치하지 않을 때 반환활 값</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>여러 값 비교하여 반환활 값을 선택할 때 사용</li>
  <li>각 값(case)에 대해 반환활 값을 지정하며, 일치하는 값이 없을 때는 default</li>
  <li>❗️ swith문은 값에 대한 비교만 가능하며, 표현식의 결과 비교 ❌</li>
</ul>

<h3 id="2️⃣-반복문-️-특정-코드를-여러-번-실행">2️⃣ 반복문 ➡️ 특정 코드를 여러 번 실행</h3>
<blockquote>
  <p><strong>while문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="k">while </span><span class="p">(</span><span class="nx">condition</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 조건이 참일 때 반복 실행되는 로직</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>조건이 참일 때까지 코드 블록을 반복</li>
</ul>

<blockquote>
  <p><strong>do…while문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="k">do</span> <span class="p">{</span>
    <span class="c1">// 코드 블록</span>
  <span class="p">}</span> <span class="k">while </span><span class="p">(</span><span class="nx">condition</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>코드 블록 먼저 실행하고 조건이 참일 때까지 반복</li>
</ul>

<blockquote>
  <p><strong>for문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="k">for </span><span class="p">(</span><span class="nx">initialization</span><span class="p">;</span> <span class="nx">condition</span><span class="p">;</span> <span class="nx">increment</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 반복 실행되는 로직</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>반복 횟수가 정해 초기화, 조건, 증감식을 포함하여 사용</li>
</ul>

<blockquote>
  <p><strong>for..in문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="k">for </span><span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 객체의 키를 반복</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>객체의 key 반복할 때 사용</li>
</ul>

<blockquote>
  <p><strong>for..of문</strong></p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="k">for </span><span class="p">(</span><span class="nx">value</span> <span class="k">of</span> <span class="nx">iterable</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 반복 실행되는 로직</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>배열이나 문자열 같은 반복 가능한 객체의 값을 반복할 때 사용</li>
</ul>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="JavaScript" /><category term="JavaScript" /><summary type="html"><![CDATA[🚀 자료형의 종류 자료형은 프로그래밍에서 변수나 값이 가질 수 있는 데이터의 종류를 의미]]></summary></entry><entry><title type="html">[JavaScript] - 기본 문법 (1)</title><link href="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="[JavaScript] - 기본 문법 (1)" /><published>2024-07-15T00:00:00+09:00</published><updated>2024-07-15T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/%EC%88%98%EC%97%85%20%EB%82%B4%EC%9A%A9%20%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://heominseok.github.io/posts/%EC%88%98%EC%97%85-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/"><![CDATA[<h2 id="-javascript를-실행-시키는-방법">🚀 JavaScript를 실행 시키는 방법</h2>
<h3 id="1️⃣-node-명령어를-사용">1️⃣ <strong>node</strong> 명령어를 사용</h3>
<ol>
  <li>우선 실행시킬 js 파일로 이동한다.
    <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c">#  ex</span>
<span class="nb">cd </span>Desktop/my-app/next-study.js
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>node 명령어로 실행
    <div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>node next-study.js
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<h3 id="2️⃣-code-runner-익스텐션을-사용">2️⃣ <strong>code runner</strong> 익스텐션을 사용</h3>
<p><img src="/assets/img/posts/training/js-code-runner.png" alt="Code Runner" width="auto" height="auto" /> <em>Code Runner</em></p>
<ol>
  <li>vscode Extensions -&gt; code runner 검색 후 설치</li>
  <li>실행시킬 js 파일에서 출력할 결과 console.log 작성 후 <code class="language-plaintext highlighter-rouge">⇧ + space</code></li>
</ol>

<h3 id="3️⃣-html-파일에서-script-태그를-사용">3️⃣ html 파일에서 <strong>script 태그</strong>를 사용</h3>
<ul>
  <li>외부 스크립트
    <ul>
      <li>head 태그 사이</li>
    </ul>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>Document<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js 파일 경로"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>🔥 속성</li>
    </ul>

    <p><code class="language-plaintext highlighter-rouge">async</code> : async 속성을 사용하면 스크립트는 비동기적으로 로드된다. 즉, HTML 파싱이 진행되는 동안 스크립트 파일을 비동기적으로 다운로드하고, 다운로드가 완료되면 바로 실행된다.</p>

    <p><code class="language-plaintext highlighter-rouge">defer</code> : defer 속성을 사용하면 스크립트는 비동기적으로 로드되지만, HTML 파싱이 완료된 후에 실행된다. 이는 HTML 문서의 파싱이 끝날 때까지 스크립트가 실행되지 않음을 보장해준다.</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">속성</th>
          <th style="text-align: center">실행 시점</th>
          <th style="text-align: center">실행 순서</th>
          <th style="text-align: center">비고</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center"><span>async</span></td>
          <td style="text-align: center">스크립트 다운로드 완료 즉시 실행</td>
          <td style="text-align: center">순서 보장 안됨</td>
          <td style="text-align: center">독립적인 스크립트에 적합</td>
        </tr>
        <tr>
          <td style="text-align: center"><span>defer</span></td>
          <td style="text-align: center">HTML 파싱 완료 후 실행</td>
          <td style="text-align: center">순서 보장됨</td>
          <td style="text-align: center">DOM 의존 스크립트에 적합</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li>body 태그 사이</li>
    </ul>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;body&gt;</span>
<span class="c">&lt;!-- body content --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js 파일 경로"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>🐥 모든 DOM 요소가 파싱된 후 스크립트가 로드</p>
  </li>
  <li>내부 스크립트 <br />
  ➡️ 🐥 말 그대로 HTML 파일 내부의 스크립트를 작성한다. 공부할 때 말고는 왠만하면 쓰지말자 !</li>
</ul>

<h3 id="4️⃣-웹-브라우저의-개발자-도구-️-console-탭에서-작성하는-방법">4️⃣ <strong>웹 브라우저의 개발자 도구</strong> ➡️ Console 탭에서 작성하는 방법</h3>
<h4 id="️-크롬---마우스-우클릭---검사---console-탭">✔️ 크롬 -&gt; 마우스 우클릭 -&gt; 검사 -&gt; Console 탭</h4>
<div style="text-align: center;">
  <img src="/assets/img/posts/training/js-webconsole.gif" alt="개발자 도구 Console 탭" style="height: 300px;" />
</div>

<h2 id="-변수--상수">🚀 변수 / 상수</h2>

<h3 id="1️⃣-상수">1️⃣ 상수</h3>
<ul>
  <li>상수는 값을 한 번 할당하면 변경할 수 없는 변수</li>
  <li><code class="language-plaintext highlighter-rouge">const</code> 키워드를 사용하여 선언</li>
</ul>

<h3 id="2️⃣-변수">2️⃣ 변수</h3>
<ul>
  <li>변수는 변하는 값을 저장할 수 있는 공간</li>
  <li>JavaScript에서 변수를 선언할 때 <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code> 키워드를 사용
    <blockquote>
      <p>var: 함수 스코프, 재선언 가능, 재할당 가능 <br />
let: 블록 스코프, 재선언 불가, 재할당 가능 <br />
const: 블록 스코프, 재선언 불가, 재할당 불가, 단, 객체나 배열의 경우 내부 값은 변경 가능</p>
    </blockquote>
  </li>
</ul>

<h3 id="3️⃣-사용-지침">3️⃣ 사용 지침</h3>
<ul>
  <li>var는 사용하지 않음</li>
  <li>let은 재할당이 필요할 때 사용</li>
  <li>const는 재할당이 필요 없을 때 사용</li>
  <li>❗️ 습관적으로 사용하도록 노력</li>
</ul>

<h2 id="-기타-기호">🚀 기타 기호</h2>
<ul>
  <li>; -&gt; 세미콜론</li>
  <li>: -&gt; 콜론</li>
  <li>” -&gt; 큰따옴표</li>
  <li>’ -&gt; 작은따옴표</li>
  <li>`` -&gt; 백틱</li>
  <li>[] -&gt; 대괄호</li>
  <li>{} -&gt; 중괄호</li>
  <li>() -&gt; 소괄호</li>
</ul>]]></content><author><name></name></author><category term="Next.js 직무교육" /><category term="JavaScript" /><category term="JavaScript" /><summary type="html"><![CDATA[🚀 JavaScript를 실행 시키는 방법 1️⃣ node 명령어를 사용 우선 실행시킬 js 파일로 이동한다. 1 2 # ex cd Desktop/my-app/next-study.js node 명령어로 실행 1 node next-study.js]]></summary></entry><entry><title type="html">JWT + 카카오 소셜 로그인 (5)</title><link href="https://heominseok.github.io/posts/JWT-+-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-(5)/" rel="alternate" type="text/html" title="JWT + 카카오 소셜 로그인 (5)" /><published>2024-06-13T00:00:00+09:00</published><updated>2024-06-13T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/JWT%20+%20%EC%B9%B4%EC%B9%B4%EC%98%A4%20%EC%86%8C%EC%85%9C%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%20(5)</id><content type="html" xml:base="https://heominseok.github.io/posts/JWT-+-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-(5)/"><![CDATA[<h1 id="-server-side">📌 Server Side</h1>

<h2 id="4-클라이언트로부터-전달-받은-인가-코드를-이용하여-카카오-서버에-토큰-요청">4. 클라이언트로부터 전달 받은 인가 코드를 이용하여 카카오 서버에 토큰 요청</h2>

<ul>
  <li>먼저 클라이언트로부터 인가 코드를 받아오는 엔드포인트에서, 카카오 서버에 액세스 토큰을 요청하는 서비스를 호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="cm">/* AuthController.java */</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/kakao"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">UserDTO</span><span class="o">&gt;</span> <span class="nf">kakaoLogin</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">UserDTO</span> <span class="n">userDTO</span> <span class="o">=</span> <span class="n">authService</span><span class="o">.</span><span class="na">kakaoLogin</span><span class="o">(</span><span class="n">code</span><span class="o">);</span>
  <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">userDTO</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="cm">/* AuthService - kakaoLogin 메소드 */</span>
<span class="kd">public</span> <span class="nc">UserDTO</span> <span class="nf">kakaoLogin</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">KakaoTokenDto</span> <span class="n">kakaoTokenDto</span> <span class="o">=</span> <span class="n">getKakaoAccessToken</span><span class="o">(</span><span class="n">code</span><span class="o">);</span>
  <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">kakaoTokenDto</span><span class="o">.</span><span class="na">getAccess_token</span><span class="o">();</span>
  <span class="cm">/* ··· */</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getKakaoAccessToken</code> : 카카오 서버에 액세스 토큰 요청 부분</li>
</ul>

<details>
<summary>코드 보기</summary>
<div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cm">/* AuthService - getKakaoAccessToken 메소드 */</span>
<span class="kd">public</span> <span class="nc">KakaoTokenDto</span> <span class="nf">getKakaoAccessToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpHeaders</span><span class="o">();</span>
  <span class="n">headers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Content-type"</span><span class="o">,</span> <span class="s">"application/x-www-form-urlencoded;charset=utf-8"</span><span class="o">);</span>

  <span class="nc">MultiValueMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedMultiValueMap</span><span class="o">&lt;&gt;();</span>
  <span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"grant_type"</span><span class="o">,</span> <span class="s">"authorization_code"</span><span class="o">);</span>
  <span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"client_id"</span><span class="o">,</span> <span class="no">KAKAO_CLIENT_ID</span><span class="o">);</span>
  <span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"redirect_uri"</span><span class="o">,</span> <span class="no">KAKAO_REDIRECT_URI</span><span class="o">);</span>
  <span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"code"</span><span class="o">,</span> <span class="n">code</span><span class="o">);</span>
  <span class="n">params</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"client_secret"</span><span class="o">,</span> <span class="no">KAKAO_CLIENT_SECRET</span><span class="o">);</span>

  <span class="nc">HttpEntity</span><span class="o">&lt;</span><span class="nc">MultiValueMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpEntity</span><span class="o">&lt;&gt;(</span><span class="n">params</span><span class="o">,</span> <span class="n">headers</span><span class="o">);</span>
  <span class="nc">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">();</span>

  <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">exchange</span><span class="o">(</span>
          <span class="s">"https://kauth.kakao.com/oauth/token"</span><span class="o">,</span>
          <span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span>
          <span class="n">request</span><span class="o">,</span>
          <span class="nc">String</span><span class="o">.</span><span class="na">class</span>
  <span class="o">);</span>
<span class="cm">/* ··· */</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

  </div>
</details>

<h2 id="5-카카오-서버에서-백엔드-서버로-토큰-발행">5. 카카오 서버에서 백엔드 서버로 토큰 발행</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getKakaoAccessToken</code> : 카카오 서버로부터 액세스 토큰 발급 부분</li>
</ul>
<details>
<summary>코드 보기</summary>
<div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="cm">/* AuthService - getKakaoAccessToken 메소드 */</span>
<span class="kd">public</span> <span class="nc">KakaoTokenDto</span> <span class="nf">getKakaoAccessToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
  <span class="cm">/* ··· */</span>
  <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
  <span class="n">objectMapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="k">new</span> <span class="nc">JavaTimeModule</span><span class="o">());</span>
  <span class="n">objectMapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="n">DeserializationFeatureFAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>

  <span class="nc">KakaoTokenDto</span> <span class="n">kakaoTokenDto</span><span class="o">;</span>
  <span class="k">try</span> <span class="o">{</span>
    <span class="n">kakaoTokenDto</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">(),</span> <span class="nc">KakaoTokenDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"카카오 토큰을 받아오는 데 실패했습니다."</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="n">kakaoTokenDto</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

  </div>
</details>

<h2 id="6️-토큰-발급이-완료되면-사용자-정보-조회-후-jwt-토큰-생성">6.❗️ 토큰 발급이 완료되면 사용자 정보 조회 후 JWT 토큰 생성</h2>
<details>
<summary>코드 보기</summary>
<div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="cm">/* AuthService - kakaoLogin 메소드 */</span>
<span class="kd">public</span> <span class="nc">UserDTO</span> <span class="nf">kakaoLogin</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">KakaoTokenDto</span> <span class="n">kakaoTokenDto</span> <span class="o">=</span> <span class="n">getKakaoAccessToken</span><span class="o">(</span><span class="n">code</span><span class="o">);</span>
  <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">kakaoTokenDto</span><span class="o">.</span><span class="na">getAccess_token</span><span class="o">();</span>

  <span class="nc">KakaoAccountDto</span> <span class="n">kakaoUserInfoDto</span> <span class="o">=</span> <span class="n">getKakaoUserInfo</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
  <span class="cm">/* ··· */</span>
  <span class="nc">UserEntity</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">).</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
  <span class="cm">/* ··· */</span>
  <span class="o">});</span>

  <span class="nc">String</span> <span class="n">jwt</span> <span class="o">=</span> <span class="n">jwtUtils</span><span class="o">.</span><span class="na">generateToken</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
  <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">jwtUtils</span><span class="o">.</span><span class="na">generateRefreshToken</span><span class="o">(</span><span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;(),</span> <span class="n">user</span><span class="o">);</span>

  <span class="nc">UserDTO</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">UserDTO</span><span class="o">.</span><span class="na">toDTO</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
  <span class="n">response</span><span class="o">.</span><span class="na">setToken</span><span class="o">(</span><span class="n">jwt</span><span class="o">);</span>
  <span class="n">response</span><span class="o">.</span><span class="na">setRefreshToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">);</span>

  <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

  </div>
</details>

<blockquote>
  <ul>
    <li>발급받은 <code class="language-plaintext highlighter-rouge">accessToken</code>을 사용하여 <code class="language-plaintext highlighter-rouge">getKakaoUserInfo</code> 메소드를 통해 카카오 서버의 사용자 정보를 조회</li>
    <li>조회한 사용자 정보를 이용하여 DB에 해당 사용자 존재 여부 확인 후 사용자 처리</li>
    <li>JWT 토큰 및 리프레시 토큰을 생성</li>
    <li>UserDTO 객체를 생성 및 사용자 정보를 담고, 토큰을 설정하여 반환</li>
  </ul>
</blockquote>

<h2 id="️-끝으로">✔️ 끝으로</h2>
<ul>
  <li>반환한 JWT 토큰을 클라이언트 쪽에서 받아서 사용자 로그인 처리를 완료한다.</li>
  <li>이 과정은 클라이언트와 서버 간의 인증을 통해 사용자에게 보다 안전하고 편리한 로그인 경험을 제공한다.</li>
  <li>또한, JWT 토큰을 사용함으로써 서버 간의 상태를 유지하지 않고도 인증을 처리할 수 있어 확장성과 보안성을 높일 수 있었다.</li>
</ul>]]></content><author><name></name></author><category term="프로젝트" /><category term="PETSTAGRAM" /><category term="React" /><category term="Spring Boot" /><category term="JWT" /><category term="Social Login" /><category term="Kakao" /><category term="OAuth2.0" /><summary type="html"><![CDATA[📌 Server Side]]></summary></entry><entry><title type="html">JWT + 카카오 소셜 로그인 (4)</title><link href="https://heominseok.github.io/posts/JWT-+-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-(4)/" rel="alternate" type="text/html" title="JWT + 카카오 소셜 로그인 (4)" /><published>2024-06-12T00:00:00+09:00</published><updated>2024-06-12T00:00:00+09:00</updated><id>https://heominseok.github.io/posts/JWT%20+%20%EC%B9%B4%EC%B9%B4%EC%98%A4%20%EC%86%8C%EC%85%9C%20%EB%A1%9C%EA%B7%B8%EC%9D%B8%20(4)</id><content type="html" xml:base="https://heominseok.github.io/posts/JWT-+-%EC%B9%B4%EC%B9%B4%EC%98%A4-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-(4)/"><![CDATA[<p><img src="/assets/img/posts/Petstagram-Project/react-springboot-social-login.png" alt="Login Flow Chart" width="auto" height="589" />
<em>React + SpringBoot + Kakao 소셜 로그인 동작 과정</em></p>

<h1 id="-client-side">📌 Client Side</h1>

<h2 id="1-카카오-로그인-클릭--카카오-서버에-인가코드-요청">1. 카카오 로그인 클릭 ➡ <strong>카카오 서버에 인가코드 요청</strong></h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="p">=</span><span class="si">{</span><span class="nx">KAKAO_AUTH_URL</span><span class="si">}</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">img</span> <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="nx">icons</span><span class="p">.</span><span class="nx">kakaoLogin</span><span class="si">}</span> <span class="na">alt</span><span class="p">=</span><span class="s">"KakaoLogo"</span> <span class="na">className</span><span class="p">=</span><span class="s">"kakao-login-icon"</span> <span class="p">/&gt;</span>
<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">CLIENT_ID</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_KAKAO_CLIENT_ID</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">REDIRECT_URI</span> <span class="o">=</span> <span class="k">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VITE_KAKAO_REDIRECT_URI</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">KAKAO_AUTH_URL</span> <span class="o">=</span> <span class="s2">`https://kauth.kakao.com/oauth/authorize?client_id=</span><span class="p">${</span><span class="nx">CLIENT_ID</span><span class="p">}</span><span class="s2">&amp;redirect_uri=</span><span class="p">${</span><span class="nx">REDIRECT_URI</span><span class="p">}</span><span class="s2">&amp;response_type=code`</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>🐰 카카오 서버에 앱 키와 Redirect URI, 응답 유형을 포함하여 인가 코드를 요청하는데 이 요청은 사용자가 카카오 로그인 페이지에서 인증 및 동의를 완료한 후, 설정된 Redirect URI로 인가 코드를 전달받기 위한 것</p>
</blockquote>

<h2 id="2-설정한-redirect-uri인-loginoauth2callbackkakao-경로로-리다이렉션-하기-위한-kakaocallback-컴포넌트-라우트-설정">2. 설정한 Redirect URI인 <span style="color: #efdb4f">/login/oauth2/callback/kakao</span> 경로로 리다이렉션 하기 위한 KakaoCallback 컴포넌트 라우트 설정</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="p">&lt;</span><span class="nc">Route</span>
  <span class="na">path</span><span class="p">=</span><span class="s">"/login/oauth2/callback/kakao"</span>
  <span class="na">element</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">KakaoCallback</span> <span class="na">setIsLoggedIn</span><span class="p">=</span><span class="si">{</span><span class="nx">setIsLoggedIn</span><span class="si">}</span> <span class="p">/&gt;</span><span class="si">}</span>
<span class="p">/&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3-1-렌더링한-kakaocallback-컴포넌트에서-인가-코드-추출-및-사용자-처리">3-1. 렌더링한 <span style="color: #efdb4f">KakaoCallback</span> 컴포넌트에서 인가 코드 추출 및 사용자 처리</h2>

<blockquote>
  <p>이 컴포넌트에서는 URL에 포함된 인증 코드를 추출하여 백엔드 서버에 액세스 토큰을 요청하고, JWT 토큰을 받게되면 로컬 스토리지에 저장하고, 로그인 처리를 업데이트 한 후 메인 홈으로 네비게이션한다.</p>
</blockquote>

<details>
<summary>코드 보기</summary>
<div>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="nf">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">fetchKakaoToken</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">URLSearchParams</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">code</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">KakaoService</span><span class="p">.</span><span class="nf">getAccessToken</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">token</span><span class="p">;</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">localStorage</span><span class="p">.</span><span class="nf">setItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">token</span><span class="dl">"</span><span class="p">,</span> <span class="nx">token</span><span class="p">);</span>
          <span class="nf">setIsLoggedIn</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
          <span class="nf">navigate</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">로그인 실패:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">response</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">카카오 로그인 에러:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="nf">fetchKakaoToken</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">location</span><span class="p">,</span> <span class="nx">navigate</span><span class="p">,</span> <span class="nx">setIsLoggedIn</span><span class="p">]);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

  </div>
</details>

<h2 id="3-2-백엔드-서버로-인가-코드-전달">3-2. 백엔드 서버로 인가 코드 전달</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">KakaoService</code>는 인가 코드를 백엔드 서버로 전달하여 액세스 토큰을 요청</p>
</blockquote>

<details>
<summary>코드 보기</summary>
<div>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">static</span> <span class="k">async</span> <span class="nf">getAccessToken</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="s2">`</span><span class="p">${</span><span class="nx">KakaoService</span><span class="p">.</span><span class="nx">BASE_URL</span><span class="p">}</span><span class="s2">/login/kakao?code=</span><span class="p">${</span><span class="nx">code</span><span class="p">}</span><span class="s2">`</span>
      <span class="p">);</span>
      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">로그인 실패: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">로그인 실패: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

  </div>
</details>]]></content><author><name></name></author><category term="프로젝트" /><category term="PETSTAGRAM" /><category term="React" /><category term="Spring Boot" /><category term="JWT" /><category term="Social Login" /><category term="Kakao" /><category term="OAuth2.0" /><summary type="html"><![CDATA[React + SpringBoot + Kakao 소셜 로그인 동작 과정]]></summary></entry></feed>